#!/usr/bin/env python3
"""
Fluid Simulation Visualizer

This script visualizes the PLY files generated by the CUDA fluid simulation.
"""

import argparse
import glob
import os
import sys
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.animation as animation
from plyfile import PlyData
import time

def read_ply_file(filename):
    """Read a PLY file and return the particle positions and colors"""
    try:
        plydata = PlyData.read(filename)
        vertex = plydata['vertex']
        
        # Extract positions
        positions = np.vstack((vertex['x'], vertex['y'], vertex['z'])).T
        
        # Extract colors
        colors = np.vstack((vertex['red'], vertex['green'], vertex['blue'])).T / 255.0
        
        return positions, colors
    except Exception as e:
        print(f"Error reading PLY file {filename}: {e}")
        return None, None

def visualize_static(ply_file):
    """Visualize a single frame of the simulation"""
    positions, colors = read_ply_file(ply_file)
    if positions is None:
        return
    
    fig = plt.figure(figsize=(10, 8))
    ax = fig.add_subplot(111, projection='3d')
    
    # Plot particles as scatter points
    ax.scatter(positions[:, 0], positions[:, 1], positions[:, 2], 
               color=colors, s=10, alpha=0.8)
    
    # Set axis limits and labels
    ax.set_xlim([0, 1])
    ax.set_ylim([0, 1.5])
    ax.set_zlim([0, 1])
    ax.set_xlabel('X')
    ax.set_ylabel('Y')
    ax.set_zlabel('Z')
    ax.set_title('Fluid Simulation Visualization')
    
    plt.tight_layout()
    plt.show()

def visualize_animation(frame_pattern, output_file=None, fps=30):
    """Create an animation from multiple frames"""
    # Find all frame files that match the pattern
    frame_files = sorted(glob.glob(frame_pattern))
    if not frame_files:
        print(f"No files found matching pattern: {frame_pattern}")
        return
    
    print(f"Found {len(frame_files)} frames")
    
    # Read the first frame to initialize the plot
    positions, colors = read_ply_file(frame_files[0])
    if positions is None:
        return
    
    fig = plt.figure(figsize=(10, 8))
    ax = fig.add_subplot(111, projection='3d')
    
    # Initial scatter plot
    scatter = ax.scatter(positions[:, 0], positions[:, 1], positions[:, 2], 
                         color=colors, s=10, alpha=0.8)
    
    # Set axis limits and labels
    ax.set_xlim([0, 1])
    ax.set_ylim([0, 1.5])
    ax.set_zlim([0, 1])
    ax.set_xlabel('X')
    ax.set_ylabel('Y')
    ax.set_zlabel('Z')
    ax.set_title('Fluid Simulation Visualization')
    
    # Function to update the plot for each frame
    def update(frame_num):
        if frame_num % 10 == 0:
            print(f"Processing frame {frame_num}/{len(frame_files)}")
        
        # Read the current frame
        positions, colors = read_ply_file(frame_files[frame_num])
        if positions is None:
            return scatter,
        
        # Update the scatter plot
        scatter._offsets3d = (positions[:, 0], positions[:, 1], positions[:, 2])
        scatter.set_color(colors)
        
        # Rotate the view slightly for more dynamic visualization
        ax.view_init(elev=30, azim=frame_num % 360)
        
        return scatter,
    
    # Create the animation
    anim = animation.FuncAnimation(fig, update, frames=len(frame_files),
                                   interval=1000/fps, blit=False)
    
    # Save animation if output file specified
    if output_file:
        if output_file.endswith('.mp4'):
            # Higher quality MP4
            writer = animation.FFMpegWriter(fps=fps, bitrate=5000)
            anim.save(output_file, writer=writer)
        else:
            # Default to GIF
            anim.save(output_file, writer='pillow', fps=fps)
        print(f"Animation saved to {output_file}")
    else:
        plt.tight_layout()
        plt.show()

def visualize_trajectory(frame_pattern):
    """Visualize the trajectory of selected particles over time"""
    # Find all frame files that match the pattern
    frame_files = sorted(glob.glob(frame_pattern))
    if not frame_files:
        print(f"No files found matching pattern: {frame_pattern}")
        return
    
    print(f"Found {len(frame_files)} frames")
    
    # Sample every nth frame for trajectory
    sample_rate = max(1, len(frame_files) // 20)
    sampled_files = frame_files[::sample_rate]
    
    # Create figure
    fig = plt.figure(figsize=(10, 8))
    ax = fig.add_subplot(111, projection='3d')
    
    # Randomly select a subset of particles to track
    first_positions, _ = read_ply_file(sampled_files[0])
    if first_positions is None:
        return
    
    num_particles = len(first_positions)
    num_tracked = min(20, num_particles)  # Track up to 20 particles
    tracked_indices = np.random.choice(num_particles, num_tracked, replace=False)
    
    # Collect trajectories
    trajectories = [[] for _ in range(num_tracked)]
    
    for file in sampled_files:
        positions, colors = read_ply_file(file)
        if positions is None:
            continue
        
        for i, idx in enumerate(tracked_indices):
            if idx < len(positions):
                trajectories[i].append(positions[idx])
    
    # Plot trajectories
    for i, traj in enumerate(trajectories):
        if traj:
            traj = np.array(traj)
            ax.plot(traj[:, 0], traj[:, 1], traj[:, 2], 
                    alpha=0.7, linewidth=1.5, label=f"Particle {i}")
    
    # Set axis limits and labels
    ax.set_xlim([0, 1])
    ax.set_ylim([0, 1.5])
    ax.set_zlim([0, 1])
    ax.set_xlabel('X')
    ax.set_ylabel('Y')
    ax.set_zlabel('Z')
    ax.set_title('Particle Trajectories')
    
    plt.tight_layout()
    plt.show()

def main():
    parser = argparse.ArgumentParser(description='Visualize Fluid Simulation Data')
    parser.add_argument('--mode', choices=['static', 'animate', 'trajectory'], 
                        default='animate', help='Visualization mode')
    parser.add_argument('--input', required=True, 
                        help='Input PLY file or pattern (e.g., "frame_*.ply")')
    parser.add_argument('--output', 
                        help='Output file for animation (e.g., "animation.mp4" or "animation.gif")')
    parser.add_argument('--fps', type=int, default=30, 
                        help='Frames per second for animation')
    
    args = parser.parse_args()
    
    if args.mode == 'static':
        visualize_static(args.input)
    elif args.mode == 'animate':
        visualize_animation(args.input, args.output, args.fps)
    elif args.mode == 'trajectory':
        visualize_trajectory(args.input)

if __name__ == "__main__":
    main()
